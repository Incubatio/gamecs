// Generated by CoffeeScript 1.4.0
(function() {

  require.config({
    paths: {
      three: '../../assets/js/three'
    },
    shim: {
      three: {
        exports: "THREE"
      }
    }
  });

  require(['gamecs', 'three', 'input'], function(gamecs, THREE, Input) {
    return gamecs.ready(function() {
      var animate, camera, cube1, cube2, cube3, cubeSize1, cubeSize2, handleInput, init, material, renderer, running, scene, x, y;
      material = new THREE.MeshNormalMaterial({
        color: 0xff0000,
        wireframe: false
      });
      cubeSize1 = new THREE.CubeGeometry(200, 200, 200);
      cube1 = new THREE.Mesh(cubeSize1, material);
      cubeSize2 = new THREE.CubeGeometry(200, 800, 1800);
      cube2 = new THREE.Mesh(cubeSize2, material);
      cube3 = new THREE.Mesh(cubeSize2, material);
      running = true;
      renderer = new THREE.CanvasRenderer();
      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000);
      scene = new THREE.Scene();
      x = y = 0;
      init = function() {
        camera.position.z = 1000;
        cube2.position.x += 400;
        cube2.position.z -= 150;
        cube3.position.x -= 400;
        cube3.position.z -= 150;
        scene.add(cube1);
        scene.add(cube2);
        scene.add(cube3);
        renderer.setSize(window.innerWidth, window.innerHeight);
        return document.getElementById("gcs-container").appendChild(renderer.domElement);
      };
      animate = function() {
        handleInput(Input.get());
        if (running) {
          requestAnimationFrame(animate);
          cube1.rotation.x += 0.01;
          cube1.rotation.y += 0.02;
        }
        return renderer.render(scene, camera);
      };
      handleInput = function(events) {
        var e, r, _i, _len;
        for (_i = 0, _len = events.length; _i < _len; _i++) {
          e = events[_i];
          if (e.type === Input.T_KEY_DOWN) {
            switch (e.key) {
              case Input.K_UP:
              case Input.K_w:
                y = -1;
                break;
              case Input.K_DOWN:
              case Input.K_s:
                y = 1;
                break;
              case Input.K_LEFT:
              case Input.K_a:
                x = -1;
                break;
              case Input.K_RIGHT:
              case Input.K_d:
                x = 1;
            }
          } else if (e.type === Input.T_KEY_UP) {
            switch (e.key) {
              case Input.K_UP:
              case Input.K_w:
                if (y < 0) {
                  y = 0;
                }
                break;
              case Input.K_DOWN:
              case Input.K_s:
                if (y > 0) {
                  y = 0;
                }
                break;
              case Input.K_LEFT:
              case Input.K_a:
                if (x < 0) {
                  x = 0;
                }
                break;
              case Input.K_RIGHT:
              case Input.K_d:
                if (x > 0) {
                  x = 0;
                }
            }
          }
        }
        r = false;
        r = (function() {
          switch (true) {
            case x === 1:
              return 0;
            case x === -1:
              return 180;
            case y === 1:
              return 270;
            case y === -1:
              return 90;
          }
        })();
        if (x !== 0 || y !== 0) {
          camera.position.y += -y * 10;
          return camera.position.x += x * 10;
        }
      };
      window.stop = function() {
        return running = false;
      };
      init();
      return animate();
      /**
      tick = (msDuration) -> 
        # game loop
        return
      }
      gamecs.time.interval(tick)
      */

    });
  });

}).call(this);
