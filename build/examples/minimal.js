// Generated by CoffeeScript 1.4.0

/**
* @fileoverview Minimal is the smalles GameJs app I could think of, which still shows off
* most of the concepts GameJs introduces.
*
* It's a pulsating, colored circle. You can make the circle change color
* by clicking.
*
*/


(function() {

  require(['gamejs'], function(gamejs) {
    var Ball, SCREEN_HEIGHT, SCREEN_WIDTH, main;
    SCREEN_WIDTH = 400;
    SCREEN_HEIGHT = 400;
    Ball = (function() {

      Ball.MAX_SIZE = 200;

      Ball.GROW_PER_SEC = 50;

      Ball.COLORS = ['#ff0000', '#00ff00', '#0000cc'];

      function Ball(center) {
        this.center = center;
        this.growPerSec = Ball.GROW_PER_SEC;
        this.radius = this.growPerSec * 2;
        this.color = 0;
        return this;
      }

      Ball.prototype.nextColor = function() {
        this.color += 1;
        if (this.color >= Ball.COLORS.length) {
          return this.color = 0;
        }
      };

      Ball.prototype.draw = function(display) {
        var lineWidth, rgbColor;
        rgbColor = Ball.COLORS[this.color];
        lineWidth = 0;
        return gamejs.Draw.circle(display, rgbColor, this.center, this.radius, lineWidth);
      };

      Ball.prototype.update = function(msDuration) {
        this.radius += this.growPerSec * (msDuration / 1000);
        if (this.radius > Ball.MAX_SIZE || this.radius < Math.abs(this.growPerSec)) {
          this.radius = this.radius > Ball.MAX_SIZE ? Ball.MAX_SIZE : Math.abs(this.growPerSec);
          return this.growPerSec = -this.growPerSec;
        }
      };

      return Ball;

    })();
    main = function() {
      var ball, ballCenter, display, gameTick, handleEvent;
      handleEvent = function(event) {
        switch (event.type) {
          case gamejs.Key.MOUSE_UP:
            return ball.nextColor();
        }
      };
      gameTick = function(msDuration) {
        gamejs.Key.get().forEach(function(event) {
          return handleEvent(event);
        });
        ball.update(msDuration);
        display.clear();
        return ball.draw(display);
      };
      display = gamejs.Display.setMode([SCREEN_WIDTH, SCREEN_HEIGHT]);
      ballCenter = [SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2];
      ball = new Ball(ballCenter);
      return gamejs.Time.interval(gameTick);
    };
    return gamejs.ready(main);
  });

}).call(this);
