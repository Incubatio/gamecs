// Generated by CoffeeScript 1.4.0
(function() {
  var __slice = [].slice;

  define(function(require) {
    /*
       * @fileoverview This module holds the essential `Rect` and `Surface` classes as
       * well as static methods for preloading assets. `gamecs.ready()` is maybe
       * the most important as it kickstarts your app.
    */

    var Base64, DEBUG_LEVELS, Display, Draw, Font, Group, Http, Img, Input, Mask, Mixer, RESOURCES, Rect, Simplex, Sprite, TileMap, Time, Transform, Xml, debugLevel, exports, init, preload, resourceBaseHref;
    DEBUG_LEVELS = ['info', 'warn', 'error', 'fatal'];
    debugLevel = 2;
    exports = {};
    RESOURCES = {};
    /*
       * set logLevel as string or number:
       *   - 0 = info
       *   - 1 = warn
       *   - 2 = error
       *   - 3 = fatal
       *
       * @example
       * gamecs.setLogLevel(0) # debug
       * gamecs.setLogLevel('error') # equal to setLogLevel(2)
    */

    exports.setLogLevel = function(logLevel) {
      if (typeof logLevel === 'string' && DEBUG_LEVELS.indexOf(logLevel)) {
        debugLevel = DEBUG_LEVELS.indexOf(logLevel);
      } else if (typeof logLevel === 'number') {
        debugLevel = logLevel;
      } else {
        throw new Error('invalid logLevel ', logLevel, ' Must be one of: ', DEBUG_LEVELS);
      }
      return debugLevel;
    };
    exports.info = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (debugLevel <= DEBUG_LEVELS.indexOf('info')) {
        return log.apply(this, args);
      }
    };
    exports.warn = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (debugLevel <= DEBUG_LEVELS.indexOf('warn')) {
        return log.apply(this, args);
      }
    };
    exports.error = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (debugLevel <= DEBUG_LEVELS.indexOf('error')) {
        return log.apply(this, args);
      }
    };
    exports.fatal = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (debugLevel <= DEBUG_LEVELS.indexOf('fatal')) {
        return log.apply(this, args);
      }
    };
    Display = exports.Display = require('display');
    Draw = exports.Draw = require('draw');
    Input = exports.Input = require('input');
    Font = exports.Font = require('font');
    Http = exports.Http = require('http');
    Img = exports.Img = require('img');
    Mask = exports.Mask = require('mask');
    Mixer = exports.Mixer = require('mixer');
    Sprite = exports.Sprite = require('sprite');
    Group = exports.Group = require('group');
    Time = exports.Time = require('time');
    Base64 = exports.Base64 = require('base64');
    Xml = exports.Xml = require('xml');
    Rect = exports.Rect = require('rect');
    Transform = exports.Transform = require('transform');
    Simplex = exports.Simplex = require('simplex');
    TileMap = exports.TileMap = require('tilemap');
    /*
      * ReadyFn is called once all modules and assets are loaded.
      * @param {Function} readyFn the function to be called once gamecs finished loading
      * @name ready
    */

    exports.ready = function(readyFn) {
      var getImageProgress, getLoadProgress, getMixerProgress, _ready, _readyResources;
      getMixerProgress = null;
      getImageProgress = null;
      Time.init();
      _ready = function() {
        if (!document.body) {
          return window.setTimeout(_ready, 50);
        }
        getImageProgress = Img.preload(RESOURCES);
        try {
          getMixerProgress = Mixer.preload(RESOURCES);
        } catch (e) {
          console.log('Error loading audio files ', e);
        }
        return window.setTimeout(_readyResources, 50);
      };
      _readyResources = function() {
        if (getImageProgress() < 1 || getMixerProgress() < 1) {
          return window.setTimeout(_readyResources, 100);
        }
        Display.init();
        Img.init();
        Mixer.init();
        Input.init();
        return readyFn();
      };
      window.setTimeout(_ready, 13);
      getLoadProgress = function() {
        if (getImageProgress) {
          return (0.5 * getImageProgress()) + (0.5 * getMixerProgress());
        }
        return 0.1;
      };
      return getLoadProgress;
    };
    /*
      * Initialize all gamecs modules. This is automatically called
      * by `gamecs.ready()`.
      * @returns {Object} the properties of this objecte are the moduleIds that failed, they value are the exceptions
      * @ignore
    */

    init = function() {
      var errorModules;
      errorModules = {};
      ['Time', 'Display', 'Img', 'Mixer', 'Input'].forEach(function(moduleName) {
        try {
          return this[moduleName].init();
        } catch (e) {
          return errorModules[moduleName] = e.toString();
        }
      });
      return errorModules;
    };
    resourceBaseHref = function() {
      return (window.$g && window.$g.resourceBaseHref) || document.location.href;
    };
    /*
      * Preload resources.
      * @param {Array} resources list of resources paths
      * @name preload
    */

    preload = exports.preload = function(resources) {
      var baseHref, uri;
      uri = require('utils/uri');
      baseHref = resourceBaseHref();
      return resources.forEach(function(res) {
        return RESOURCES[res] = uri.resolve(baseHref, res);
      }, this);
    };
    return exports;
  });

}).call(this);
