// Generated by CoffeeScript 1.4.0
(function() {

  define(function(require) {
    /**
    * @fileoverview Make synchronous http requests to your game's serverside component.
    *
    * If you configure a ajax base URL you can make http requests to your
    * server using those functions.
    *
    * The most high-level functions are `load()` and `save()` which take
    * and return a JavaScript object, which they will send to / recieve from
    * the server-side in JSON format.
    *
    * @example
    *
    *     <script>
    *     // Same Origin policy applies! You can only make requests
    *     // to the server from which the html page is served.
    *      $g = {
    *         ajaxBaseHref: "http://the-same-server.com/ajax/"
    *      }
    *      </script>
    *      <script src="./public/gamecs-wrapped.js"></script>
    *      ....
    *      typeof gamecs.load('userdata/') === 'object'
    *      typeof gamecs.get('userdata/') === 'string'
    *      ...
    *
    */

    var Http;
    return Http = (function() {

      function Http() {}

      /**
      * Response object returned by http functions `get` and `post`. This
      * class is not instantiable.
      *
      * @param{String} responseText
      * @param {String} responseXML
      * @param {Number} status
      * @param {String} statusText
      */


      Http.Response = function() {
        /** @param {String} header
        */
        this.getResponseHeader = function(header) {};
        throw new Error('response class not instantiable');
      };

      /**
      * Make http request to server-side
      * @param {String} method http method
      * @param {String} url
      * @param {String|Object} data
      * @param {String|Object} type "Accept" header value
      * @return {Response} response
      */


      Http.ajax = function(method, url, data, type) {
        var response;
        data = data || null;
        response = new XMLHttpRequest();
        response.open(method, url, false);
        if (type) {
          response.setRequestHeader("Accept", type);
        }
        if (data instanceof Object) {
          data = JSON.stringify(data);
          response.setRequestHeader('Content-Type', 'application/json');
        }
        response.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        response.send(data);
        return response;
      };

      /**
      * Make http GET request to server-side
      * @param {String} url
      */


      Http.get = function(url) {
        return this.ajax('GET', url);
      };

      /*
           * Make http POST request to server-side
           * @param {String} url
           * @param {String|Object} data
           * @param {String|Object} type "Accept" header value
           * @returns {Response}
      */


      Http.post = function(url, data, type) {
        return this.ajax('POST', url, data, type);
      };

      Http.stringify = function(response) {
        /* eval is evil
        */
        return eval('(' + response.responseText + ')');
      };

      Http.ajaxBaseHref = function() {
        return (window.$g && window.$g.ajaxBaseHref) || './';
      };

      /*
           * Load an object from the server-side.
           * @param {String} url
           * @return {Object} the object loaded from the server
      */


      Http.load = function(url) {
        return this.stringify(this.get(this.ajaxBaseHref() + url));
      };

      /*
           * Send an object to a server-side function.
           * @param {String} url
           * @param {String|Object} data
           * @param {String|Object} type "Accept" header value
           * @returns {Object} the response object
      */


      Http.save = function(url, data, type) {
        return this.stringify(this.post(this.ajaxBaseHref() + url, {
          payload: data
        }, type));
      };

      return Http;

    })();
  });

}).call(this);
