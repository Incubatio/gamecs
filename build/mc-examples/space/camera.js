// Generated by CoffeeScript 1.4.0
(function() {

  define(function(require) {
    var Camera, gamecs;
    gamecs = require('gamecs');
    return Camera = (function() {

      Camera.prototype.scaleRate = 1;

      function Camera(size, options) {
        this.size = size;
        options = options || {};
        this.x = options.x || 0;
        this.y = options.y || 0;
        this.i = options.i || 64;
        this.dirty = false;
      }

      Camera.prototype.isVisible = function(gobject) {
        return gobject.rect.collideRect(this.getScreenRect());
      };

      Camera.prototype.getOffset = function() {
        var offset;
        offset = this.getScreenRect().topleft;
        return [-offset[0], -offset[1]];
      };

      Camera.prototype.getScreenRect = function() {
        var a, i, left, size, top,
          _this = this;
        i = Math.round(this.i * this.scaleRate) - this.i;
        size = [Math.round(this.size[0] / this.scaleRate), Math.round(this.size[1] / this.scaleRate)];
        a = function(n, m) {
          return n * m - (n > 0 ? i * n : 0);
        };
        left = a(this.x, size[0]);
        top = a(this.y, size[1]);
        return new gamecs.Rect([left, top], size);
      };

      Camera.prototype.follow = function(sprite) {
        var rect, screenRect, x, y;
        rect = sprite.rect;
        screenRect = this.getScreenRect();
        x = this.x;
        y = this.y;
        switch (false) {
          case !(sprite.components.Mobile.directionY < 0 && rect.top < screenRect.top):
            y--;
            break;
          case !(sprite.components.Mobile.directionY > 0 && rect.top + rect.height > screenRect.top + screenRect.height):
            y++;
            break;
          case !(sprite.components.Mobile.directionX < 0 && rect.left < screenRect.left):
            x--;
            break;
          case !(sprite.components.Mobile.directionX > 0 && rect.left + rect.width > screenRect.left + screenRect.width):
            x++;
        }
        if (x !== this.x || y !== this.y) {
          this.dirty = true;
          this.x = x;
          return this.y = y;
        }
      };

      Camera.prototype.scale = function(scaleRate) {
        this.scaleRate = scaleRate;
      };

      return Camera;

    })();
  });

}).call(this);
