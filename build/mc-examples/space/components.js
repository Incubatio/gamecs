// Generated by CoffeeScript 1.4.0
(function() {

  define(function(require) {
    var Objects, components;
    Objects = require('utils/objects');
    components = {
      Visible: (function() {

        function _Class() {}

        _Class.prototype.image_urn = null;

        _Class.prototype.image = null;

        _Class.prototype.originalImage = null;

        _Class.prototype.mask = null;

        _Class.prototype.color = "#f00";

        _Class.prototype.setImage = function(image) {
          this.dirty = true;
          return this.image = image;
        };

        _Class.prototype.size = null;

        _Class.prototype.radius = null;

        _Class.prototype.shape = null;

        return _Class;

      })(),
      Communicable: (function() {

        function _Class() {}

        _Class.prototype.avatar = "question.png";

        _Class.prototype.dialogs = null;

        return _Class;

      })(),
      Mobile: (function() {

        _Class.prototype.velocity = null;

        _Class.prototype.direction = null;

        _Class.prototype.hasNotCollided = null;

        function _Class() {
          this.velocity = [0, 0, 0];
          this.direction = [0, 0, 0];
          this.hasNotCollided = [true, true, true];
        }

        return _Class;

      })(),
      Collidable: (function() {

        function _Class() {}

        _Class.prototype.shape = null;

        return _Class;

      })(),
      Rotative: (function() {

        function _Class() {}

        _Class.prototype.rotationSpeed = 10;

        _Class.prototype.rotation = 0;

        return _Class;

      })(),
      Flipable: (function() {

        function _Class() {}

        _Class.prototype.vertical = null;

        _Class.prototype.horizontal = null;

        return _Class;

      })(),
      Movable: (function() {

        function _Class() {}

        return _Class;

      })(),
      Destructible: (function() {

        function _Class() {}

        return _Class;

      })(),
      Animated: (function() {

        function _Class() {}

        _Class.prototype.imageset = null;

        _Class.prototype.frameset = null;

        _Class.prototype.frameSize = null;

        _Class.prototype.animation = null;

        _Class.prototype.entitySheet = null;

        _Class.prototype.options = null;

        return _Class;

      })(),
      Inteligent: (function() {

        function _Class() {}

        _Class.prototype.pathfinding = 'straight';

        _Class.prototype.detectionRadius = 0;

        return _Class;

      })(),
      Weaponized: (function() {

        function _Class() {}

        _Class.prototype.behavior = 'offensive';

        _Class.prototype.alorithm = 'kamikaze';

        _Class.prototype.attacking = null;

        _Class.prototype.weapon = 'sword';

        return _Class;

      })(),
      Triggerable: (function() {

        function _Class() {}

        _Class.prototype.triggered = null;

        return _Class;

      })(),
      Jumpable: (function() {

        function _Class() {}

        _Class.prototype.startedAt = null;

        _Class.prototype.canJump = true;

        _Class.prototype.jumping = null;

        return _Class;

      })()
    };
    Objects.accessors(components.Mobile.prototype, {
      directionX: {
        get: function() {
          return this.direction[0];
        },
        set: function(direction) {
          return this.direction[0] = direction;
        }
      },
      directionY: {
        get: function() {
          return this.direction[1];
        },
        set: function(direction) {
          return this.direction[1] = direction;
        }
      },
      directionZ: {
        get: function() {
          return this.direction[2];
        },
        set: function(direction) {
          return this.direction[2] = direction;
        }
      },
      velocityX: {
        get: function() {
          return this.velocity[0];
        },
        set: function(velocity) {
          return this.velocity[0] = velocity;
        }
      },
      velocityY: {
        get: function() {
          return this.velocity[1];
        },
        set: function(velocity) {
          return this.velocity[1] = velocity;
        }
      },
      velocityZ: {
        get: function() {
          return this.velocity[2];
        },
        set: function(velocity) {
          return this.velocity[2] = velocity;
        }
      },
      hasNotCollidedX: {
        get: function() {
          return this.hasNotCollided[0];
        },
        set: function(hasNotCollided) {
          return this.hasNotCollided[0] = hasNotCollided;
        }
      },
      hasNotCollidedY: {
        get: function() {
          return this.hasNotCollided[1];
        },
        set: function(hasNotCollided) {
          return this.hasNotCollided[1] = hasNotCollided;
        }
      },
      hasNotCollidedZ: {
        get: function() {
          return this.hasNotCollided[2];
        },
        set: function(hasNotCollided) {
          return this.hasNotCollided[2] = hasNotCollided;
        }
      }
    });
    return components;
  });

}).call(this);
