// Generated by CoffeeScript 1.4.0
(function() {

  define(function(require) {
    var Director, Entity, gamecs;
    gamecs = require('gamecs');
    Entity = require('entity');
    return Director = (function() {

      Director.prototype.isGameOver = false;

      Director.prototype.loadImage = function(suffix) {
        return gamecs.Img.load(this.data.prefixs.image + suffix);
      };

      Director.prototype.sounds = {};

      Director.prototype.playSound = function(suffix) {
        var sound;
        sound = new gamecs.Mixer.Sound(this.data.prefixs.sfx + suffix + '.' + gamecs.Mixer.sfxType);
        return sound.play();
      };

      Director.prototype.getRandPos = function(x, y) {
        if (x == null) {
          x = false;
        }
        if (y == null) {
          y = false;
        }
        if (x === false) {
          x = Math.round(Math.random() * this.data.screen.size[0]);
        }
        if (y === false) {
          y = Math.round(Math.random() * this.data.screen.size[1]);
        }
        return [x, y];
      };

      Director.prototype.createStar = function(options) {
        var k, pos, star, v;
        if (options == null) {
          options = {};
        }
        k = 'Star';
        v = this.data.sprites[k];
        pos = this.getRandPos(options.x, options.y);
        star = new Entity(pos, v, {
          name: k,
          rect: new gamecs.Rect(pos, v.Visible.size),
          dirty: true
        });
        star.components.Mobile.speed = Math.round(v.Mobile.speed * Math.random()) + 1;
        return star;
      };

      Director.prototype.createMeteor = function(options) {
        var k, pos, star, v;
        if (options == null) {
          options = {};
        }
        k = 'Meteor';
        v = this.data.sprites[k];
        pos = this.getRandPos(options.x, -v.Visible.size[1]);
        star = new Entity(pos, v, {
          name: k,
          rect: new gamecs.Rect(pos, v.Visible.size),
          dirty: true
        });
        star.components.Mobile.speed = Math.round(v.Mobile.speed * Math.random()) + 1;
        return star;
      };

      function Director(display, data) {
        var entity, i, k, pos, v, _i, _j, _len, _ref, _ref1, _ref2, _ref3;
        this.display = display;
        this.data = data;
        this.font = new gamecs.Font('20px monospace');
        this.display.bg1.fill('#000');
        this.display.fg.blit((new gamecs.Font('45px Sans-serif')).render('Hello World'));
        _ref = this.data.sprites;
        for (k in _ref) {
          v = _ref[k];
          if (v.Visible && v.Visible.image) {
            v.Visible.image_urn = v.Visible.image;
            v.Visible.image = this.loadImage(v.Visible.image_urn);
            v.Visible.size = v.Visible.image.getSize();
          }
        }
        this.groups = {
          stars: [],
          sprites: []
        };
        _ref1 = this.data.scene.actors;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          _ref2 = _ref1[_i], k = _ref2[0], pos = _ref2[1];
          v = this.data.sprites[k];
          entity = new Entity(pos, v, {
            name: k,
            rect: new gamecs.Rect(pos, v.Visible.size),
            dirty: true
          });
          entity.oldRect = entity.rect.clone();
          this.groups.sprites.push(entity);
          if (entity.name === "Player") {
            this.player = entity;
          }
        }
        this.player.score = 0;
        this.blitScore(0);
        for (i = _j = 0, _ref3 = this.data.stars.number; 0 <= _ref3 ? _j <= _ref3 : _j >= _ref3; i = 0 <= _ref3 ? ++_j : --_j) {
          this.groups.stars.push(this.createStar());
        }
      }

      Director.prototype.handleInput = function(events) {
        var component, event, x, y, _i, _len, _results;
        component = this.player.components.Mobile;
        if (!this.isGameOver) {
          _results = [];
          for (_i = 0, _len = events.length; _i < _len; _i++) {
            event = events[_i];
            x = component.moveX;
            y = component.moveY;
            if (event.type === gamecs.Input.T_KEY_DOWN) {
              switch (event.key) {
                case gamecs.Input.K_UP:
                case gamecs.Input.K_w:
                  y = -1;
                  break;
                case gamecs.Input.K_DOWN:
                case gamecs.Input.K_s:
                  y = 1;
                  break;
                case gamecs.Input.K_LEFT:
                case gamecs.Input.K_a:
                  x = -1;
                  break;
                case gamecs.Input.K_RIGHT:
                case gamecs.Input.K_d:
                  x = 1;
                  break;
                case gamecs.Input.K_SPACE:
                  this.player.firing = true;
              }
            } else if (event.type === gamecs.Input.T_KEY_UP) {
              switch (event.key) {
                case gamecs.Input.K_UP:
                case gamecs.Input.K_w:
                  if (y < 0) {
                    y = 0;
                  }
                  break;
                case gamecs.Input.K_DOWN:
                case gamecs.Input.K_s:
                  if (y > 0) {
                    y = 0;
                  }
                  break;
                case gamecs.Input.K_LEFT:
                case gamecs.Input.K_a:
                  if (x < 0) {
                    x = 0;
                  }
                  break;
                case gamecs.Input.K_RIGHT:
                case gamecs.Input.K_d:
                  if (x > 0) {
                    x = 0;
                  }
                  break;
                case gamecs.Input.K_SPACE:
                  this.player.firing = false;
              }
            }
            component.moveX = x;
            _results.push(component.moveY = y);
          }
          return _results;
        }
      };

      Director.prototype.update = function() {
        var entity, group, h, i, k, pos, v, w, w2, _i, _len, _ref, _ref1, _results;
        _ref = this.groups;
        for (k in _ref) {
          group = _ref[k];
          for (_i = 0, _len = group.length; _i < _len; _i++) {
            entity = group[_i];
            if (entity.components.Mobile) {
              w = this.data.screen.size[0];
              h = this.data.screen.size[1];
              w2 = Math.round(entity.rect.width / 2);
              if (entity.name === 'Player') {
                if (entity.rect.left < -w2) {
                  entity.rect.left = -w2;
                } else if (entity.rect.right > w + w2) {
                  entity.rect.right = w + w2;
                }
                if (entity.rect.top < 0) {
                  entity.rect.top = 0;
                } else if (entity.rect.bottom > h) {
                  entity.rect.bottom = h;
                }
              } else {
                if (entity.rect.left < -w2 || entity.rect.right > w + w2 || entity.rect.bottom < 0 || entity.rect.top > h) {
                  entity.killed = true;
                  if (entity.name === 'Star' && this.groups.stars.length <= this.data.stars.number) {
                    this.groups.stars.push(this.createStar({
                      y: 0
                    }));
                  }
                }
              }
            }
          }
        }
        if (this.player.cooldown <= 0 || !this.player.cooldown) {
          if (this.player.firing) {
            v = this.data.sprites.RLazer;
            pos = [this.player.rect.left + 45, this.player.rect.top - 50];
            this.groups.sprites.push(new Entity(pos, v, {
              name: 'RLazer',
              rect: new gamecs.Rect(pos, v.Visible.size),
              dirty: true
            }));
            this.playSound('laser1');
            this.player.cooldown = 100;
          }
        } else {
          this.player.cooldown -= 30;
        }
        if (this.data.meteors.cooldown <= 0 || !this.data.meteors.cooldown) {
          this.groups.sprites.push(this.createMeteor());
          this.data.meteors.cooldown = this.data.meteors.spawnRate;
        } else {
          this.data.meteors.cooldown -= 30;
        }
        _ref1 = this.groups;
        _results = [];
        for (k in _ref1) {
          group = _ref1[k];
          _results.push((function() {
            var _j, _ref2, _results1;
            _results1 = [];
            for (i = _j = 0, _ref2 = group.length; 0 <= _ref2 ? _j < _ref2 : _j > _ref2; i = 0 <= _ref2 ? ++_j : --_j) {
              entity = group[i];
              if (entity && entity.killed) {
                if (entity.name === 'Meteor' && entity.killer === 'RLazer') {
                  this.blitScore(10);
                }
                this.display.fg.clear(entity.rect);
                _results1.push(group.splice(i, 1));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      Director.prototype.gameOver = function() {
        var s1, surface;
        this.isGameOver = true;
        s1 = this.data.screen.size;
        surface = new gamecs.Surface(s1);
        surface.setAlpha(0.5);
        surface.fill('#f00');
        this.display.fg2.blit(surface);
        return this.display.fg2.blit(this.font.render('Game Over', '#fff'), [s1[0] / 2 - 30, s1[1] / 2 - 5]);
      };

      Director.prototype.blitScore = function(score) {
        var pos, s, surface;
        this.player.score += score;
        s = this.data.screen.size;
        score = (this.player.score + 10000000).toString().slice(1);
        surface = this.font.render(score, '#fff');
        pos = [s[0] - 100, 20];
        this.display.fg2.clear(surface.clone().clear(), pos);
        return this.display.fg2.blit(surface, pos);
      };

      return Director;

    })();
  });

}).call(this);
