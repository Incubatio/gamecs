// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var Entity, Events, components;
    components = require('components');
    Events = (function() {

      function Events() {}

      Events.prototype.on = function(name, cb) {
        if (!this._events) {
          this._events = {};
        }
        if (!this._events[name]) {
          this._events[name] = [];
        }
        return this._events[name].push(cb);
      };

      Events.prototype.off = function(name) {
        if (this._events) {
          return delete this._events[name];
        }
      };

      Events.prototype.trigger = function(name, argv, callback) {
        var cb, _i, _len, _ref, _results;
        if (argv == null) {
          argv = {};
        }
        if (callback == null) {
          callback = null;
        }
        if (this._events && this._events[name]) {
          _ref = this._events[name];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            cb = _ref[_i];
            _results.push(cb({
              name: name,
              ctx: this,
              params: argv
            }));
          }
          return _results;
        }
      };

      return Events;

    })();
    return Entity = (function(_super) {
      var UID;

      __extends(Entity, _super);

      UID = 1;

      function Entity(pos, componentsData, options) {
        var k, k2, params, v, v2;
        this.pos = pos;
        if (options == null) {
          options = {};
        }
        this.uid = UID++;
        for (k in options) {
          v = options[k];
          this[k] = v;
        }
        this.components = {};
        for (k in componentsData) {
          params = componentsData[k];
          if (components.hasOwnProperty(k)) {
            this.components[k] = new components[k]();
            for (k2 in params) {
              v2 = params[k2];
              if (!components[k].prototype.hasOwnProperty(k2)) {
                console.log('Warning Component Property "' + k2 + '" Not Found in ' + k + '| current value: ' + v2);
              }
              if (v2 instanceof Array) {
                this.components[k][k2] = v2.slice(0);
              } else {
                this.components[k][k2] = v2;
              }
            }
          } else {
            console.log('Warning Component Class "' + k + '" Not Found.');
          }
        }
      }

      Entity.prototype.toString = function() {
        return (this.name || "Entity") + '#' + this.uid;
      };

      return Entity;

    })(Events);
  });

}).call(this);
