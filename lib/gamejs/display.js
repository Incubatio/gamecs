// Generated by CoffeeScript 1.4.0
(function() {
  var CANVAS_ID, DISABLE_SMOOTHING, LOADER_ID, SURFACE, Surface, getCanvas, getSurface, _SURFACE_SMOOTHING;

  Surface = require('../gamejs').Surface;

  /*
   * @fileoverview Methods to create, access and manipulate the display Surface.
   *
   * @example
   * display = gamejs.display.setMode([800, 600])
   * // blit sunflower picture in top left corner of display
   * sunflower = gamejs.image.load("images/sunflower")
   * display.blit(sunflower)
   *
  */


  CANVAS_ID = "gjs-canvas";

  LOADER_ID = "gjs-loader";

  SURFACE = null;

  /*
  * Pass this flag to `gamejs.display.setMode(resolution, flags)` to disable
  * pixel smoothing; this is, for example, useful for retro-style, low resolution graphics
  * where you don't want the browser to smooth them when scaling & drawing.
  */


  DISABLE_SMOOTHING = exports.DISABLE_SMOOTHING = 2;

  _SURFACE_SMOOTHING = true;

  /*
   * @returns {document.Element} the canvas dom element
  */


  getCanvas = function() {
    return document.getElementById(CANVAS_ID);
  };

  /*
   * Create the master Canvas plane.
   * @ignore
  */


  exports.init = function() {
    /* create canvas element if not yet present
    */

    var $loader, jsGameCanvas;
    jsGameCanvas = null;
    if ((jsGameCanvas = getCanvas()) === null) {
      jsGameCanvas = document.createElement("canvas");
      jsGameCanvas.setAttribute("id", CANVAS_ID);
      document.body.appendChild(jsGameCanvas);
    }
    jsGameCanvas.setAttribute("tabindex", 1);
    jsGameCanvas.focus();
    /* remove loader if any
    */

    $loader = document.getElementById('gjs-loader');
    if ($loader) {
      $loader.style.display = "none";
    }
  };

  /* * @ignore
  */


  exports._hasFocus = function() {
    return document.activeElement === getCanvas();
  };

  /* * @ignore
  */


  exports._isSmoothingEnabled = function() {
    return _SURFACE_SMOOTHING === true;
  };

  /*
   * Set the width and height of the Display. Conviniently this will
   * return the actual display Surface - the same as calling [gamejs.display.getSurface()](#getSurface))
   * later on.
   * @param {Array} dimensions [width, height] of the display surface
  */


  exports.setMode = function(dimensions, flags) {
    var canvas;
    SURFACE = null;
    canvas = getCanvas();
    canvas.width = dimensions[0];
    canvas.height = dimensions[1];
    _SURFACE_SMOOTHING = flags !== DISABLE_SMOOTHING;
    return getSurface();
  };

  /*
   * Set the Caption of the Display (document.title)
   * @param {String} title the title of the app
   * @param {gamejs.Image} icon FIXME implement favicon support
  */


  exports.setCaption = function(title, icon) {
    return document.title = title;
  };

  /*
   * The Display (the canvas element) is most likely not in the top left corner
   * of the browser due to CSS styling. To calculate the mouseposition within the
   * canvas we need this offset.
   * @see {gamejs.event}
   * @ignore
   *
   * @returns {Array} [x, y] offset of the canvas
  */


  exports._getCanvasOffset = function() {
    var boundRect;
    boundRect = getCanvas().getBoundingClientRect();
    return [boundRect.left, boundRect.top];
  };

  /*
   * Drawing on the Surface returned by `getSurface()` will draw on the screen.
   * @returns {gamejs.Surface} the display Surface
  */


  getSurface = exports.getSurface = function() {
    var canvas;
    if (SURFACE === null) {
      canvas = getCanvas();
      SURFACE = new Surface([canvas.clientWidth, canvas.clientHeight]);
      SURFACE._canvas = canvas;
      SURFACE._context = canvas.getContext('2d');
    }
    return SURFACE;
  };

}).call(this);
